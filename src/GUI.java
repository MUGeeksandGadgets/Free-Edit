import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.*;
import java.util.Scanner;

/**
 * Shinn Edit text editing GUI
 * @author Patrick Shinn
 * @version 5/9/16
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        loadFile();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("text files", "txt", "text");
        FileNameExtensionFilter filter1 = new FileNameExtensionFilter("java files", "java");
        saveWarning.setLocationRelativeTo(this);
        chooser.setFileFilter(filter);
        chooser.setFileFilter(filter1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // builds the GUI components.
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        javax.swing.JSeparator separator;
        javax.swing.JButton bntDontSave;
        javax.swing.JButton btnSave;
        javax.swing.JMenuItem fileOpen;
        javax.swing.JMenuItem fileSave;
        javax.swing.JMenuItem fileSaveAs;
        javax.swing.JLabel jLabel1;
        javax.swing.JLabel jLabel2;
        javax.swing.JLabel jLabel3;
        javax.swing.JMenuItem jMenuItem1;
        javax.swing.JPanel jPanel2;
        javax.swing.JPanel jPanel4;
        javax.swing.JScrollPane jScrollPane1;
        javax.swing.JLabel lblFonts;
        javax.swing.JLabel lblPt;
        javax.swing.JLabel lblTheme;
        javax.swing.JPanel mainPanel;
        javax.swing.JMenuBar menuBar;
        javax.swing.JMenuItem menuClose;
        javax.swing.JMenu menuFile;
        javax.swing.JMenu menuHelp;

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double width = screenSize.getWidth()/2;
        double height = screenSize.getHeight()/2;
        saveWarning = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        bntDontSave = new javax.swing.JButton();
        aboutFrame = new javax.swing.JFrame();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        comboFonts = new javax.swing.JComboBox<>();
        lblFonts = new javax.swing.JLabel();
        comboPoint = new javax.swing.JComboBox<>();
        lblPt = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        comboThemes = new javax.swing.JComboBox<>();
        lblTheme = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuClose = new javax.swing.JMenuItem();
        fileOpen = new javax.swing.JMenuItem();
        fileSave = new javax.swing.JMenuItem();
        fileSaveAs = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        saveWarning.setLocation((int)(width - 266), (int)(height - 68.5));
        saveWarning.setTitle("File Not Saved");
        saveWarning.setMinimumSize(new java.awt.Dimension(532, 137));
        saveWarning.setResizable(false);

        jLabel1.setText("You are about to close without saving, would you like to save?");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        bntDontSave.setText("Don't Save");
        bntDontSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntDontSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(185, 185, 185)
                        .addComponent(bntDontSave, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(bntDontSave))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout saveWarningLayout = new javax.swing.GroupLayout(saveWarning.getContentPane());
        saveWarning.getContentPane().setLayout(saveWarningLayout);
        saveWarningLayout.setHorizontalGroup(
            saveWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        saveWarningLayout.setVerticalGroup(
            saveWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveWarningLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        aboutFrame.setTitle("About");
        aboutFrame.setMinimumSize(new java.awt.Dimension(395, 100));
        aboutFrame.setSize(new java.awt.Dimension(395, 100));

        jLabel2.setText("Shinn Edit");

        jLabel3.setText("Version: 1.0");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel3))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(jLabel2)))
                .addContainerGap(141, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jLabel3))
        );

        javax.swing.GroupLayout aboutFrameLayout = new javax.swing.GroupLayout(aboutFrame.getContentPane());
        aboutFrame.getContentPane().setLayout(aboutFrameLayout);
        aboutFrameLayout.setHorizontalGroup(
            aboutFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        aboutFrameLayout.setVerticalGroup(
            aboutFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shinn Edit");

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        comboFonts.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arial", "Sans", "Ubuntu", "Monospace", "Courier" }));
        comboFonts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFontsActionPerformed(evt);
            }
        });

        lblFonts.setText("Fonts");

        comboPoint.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "12", "14", "16", "18", "20", "24", "30", "34" }));
        comboPoint.setMaximumSize(new java.awt.Dimension(95, 25));
        comboPoint.setMinimumSize(new java.awt.Dimension(95, 25));
        comboPoint.setPreferredSize(new java.awt.Dimension(95, 25));
        comboPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPointActionPerformed(evt);
            }
        });

        lblPt.setText("Point");


        comboThemes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Light", "Dark" }));
        comboThemes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboThemesActionPerformed(evt);
            }
        });

        lblTheme.setText("Themes");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 901, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(comboFonts, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFonts, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPt)
                        .addGap(106, 106, 106)
                        .addComponent(comboThemes, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTheme)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(separator, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboFonts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFonts)
                            .addComponent(comboPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPt)
                            .addComponent(comboThemes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTheme))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuBar.setBackground(new java.awt.Color(51, 51, 51));
        menuBar.setBorder(null);
        menuBar.setEnabled(false);
        menuBar.setMaximumSize(new java.awt.Dimension(37, 32769));
        menuBar.setMinimumSize(new java.awt.Dimension(37, 2));
        menuBar.setName(""); // NOI18N
        menuBar.setPreferredSize(new java.awt.Dimension(37, 21));

        menuFile.setText("File");

        menuClose.setText("Close");
        menuClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCloseActionPerformed(evt);
            }
        });
        menuFile.add(menuClose);

        fileOpen.setText("Open");
        fileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenActionPerformed(evt);
            }
        });
        menuFile.add(fileOpen);

        fileSave.setText("Save");
        fileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveActionPerformed(evt);
            }
        });
        menuFile.add(fileSave);

        fileSaveAs.setText("Save As");
        fileSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(fileSaveAs);

        menuBar.add(menuFile);

        menuHelp.setText("Help");

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuHelp.add(jMenuItem1);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(923, 589));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    // usage variables
    private String[] settings = new String[3];
    private final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    private final double width = screenSize.getWidth()/2;
    private final double height = screenSize.getHeight()/2;
    private File selectedFile;
    private Boolean fileOpened = false;
    private final JFileChooser chooser = new JFileChooser();
    private String oldLine = "";
    
    // icon
    ImageIcon image = new ImageIcon("icon.png");

    // Opens a file of the user's choice for editing.
    private void fileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenActionPerformed
        FileReader myReader;
        int result = chooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            selectedFile = chooser.getSelectedFile();
            try{
                myReader = new FileReader(selectedFile);
                Scanner scan = new Scanner(myReader);
                String text = "";
                while (scan.hasNextLine()){
                    String line = scan.nextLine();
                    text += line + "\n";
                }
                textArea.setText(text);
                System.out.println("Selected file: " + selectedFile.getAbsolutePath());
                fileOpened = true;
            }catch (IOException error){
                // do nothing
            }

        }
    }//GEN-LAST:event_fileOpenActionPerformed

    /*
    Saves the text file. If the file has not been saved before, a new save file is generated, otherwise it is saved
    to the previous file that was saved to.
     */
    private void fileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveActionPerformed
        String line = textArea.getText();
        if (!fileOpened){
            chooser.setAcceptAllFileFilterUsed(false);
            if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
                File fileToSave = chooser.getSelectedFile();
                try{
                    PrintWriter saveFile = new PrintWriter(fileToSave);
                    saveFile.print(line);
                    saveFile.close();
                    selectedFile = fileToSave;
                    fileOpened = true;
                    oldLine = line;
                }catch (IOException error){
                    // do nothing
                }
            }
        }else{
            try {
                PrintWriter writer = new PrintWriter(selectedFile);
                writer.print(line);
                writer.close();
                oldLine = line;
            }catch (IOException error){
                // do nothing
            }
        }

    }//GEN-LAST:event_fileSaveActionPerformed

    // Save file under a new name, save as
    private void fileSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveAsActionPerformed
        String line = textArea.getText();
            if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
                File fileToSave = chooser.getSelectedFile();
                try{
                    PrintWriter saveFile = new PrintWriter(fileToSave);
                    saveFile.print(line);
                    saveFile.close();
                    selectedFile = fileToSave;
                    fileOpened = true;
                    oldLine = line;
                }catch (IOException error){
                    // do nothing
                }
            }
    }//GEN-LAST:event_fileSaveAsActionPerformed

    // Closes the current file, if not saved, it will ask the user if they want to save their work
    private void menuCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCloseActionPerformed
        if (!oldLine.equals(textArea.getText())){
            saveWarning.setVisible(true);
        }else {
            fileOpened = false;
            textArea.setText("");
        }
    }//GEN-LAST:event_menuCloseActionPerformed

    // Saves the users work in a file not saved warning.
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String line = textArea.getText();
        if (!fileOpened){
            chooser.setAcceptAllFileFilterUsed(false);
            if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
                File fileToSave = chooser.getSelectedFile();
                try{
                    PrintWriter saveFile = new PrintWriter(fileToSave);
                    saveFile.print(line);
                    saveFile.close();
                    selectedFile = fileToSave;
                    fileOpened = true;
                    oldLine = line;
                }catch (IOException error){
                    // do nothing
                }
            }
        }else{
            try {
                PrintWriter writer = new PrintWriter(selectedFile);
                writer.print(line);
                writer.close();
                oldLine = line;
            }catch (IOException error){
                // do nothing
            }
        }
        saveWarning.setVisible(false);
    }//GEN-LAST:event_btnSaveActionPerformed

    // Does not save the users work in a file not saved warning.
    private void bntDontSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntDontSaveActionPerformed
        fileOpened = false;
        textArea.setText("");
        saveWarning.setVisible(false);
    }//GEN-LAST:event_bntDontSaveActionPerformed

    // Shows the about frame.
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        aboutFrame.setLocation((int)(width - aboutFrame.getWidth()/2),(int)(height - aboutFrame.getHeight()/2));
        aboutFrame.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    // Allows the user to select a font from a list and apply it.
    private void comboFontsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFontsActionPerformed
        int selection = comboFonts.getSelectedIndex();
        String selectedFont = comboFonts.getItemAt(selection);
        int currentFontSize = textArea.getFont().getSize();
        Font newFont = new Font(selectedFont, Font.PLAIN, currentFontSize);
        textArea.setFont(newFont);
        settings[1] = selectedFont;
        try{
            FileOutputStream fos = new FileOutputStream("settings.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(settings);
            oos.close();
            fos.close();
        }catch (IOException error){
            // do nothing
        }
    }//GEN-LAST:event_comboFontsActionPerformed

    // Allows the user to select a font size from a list, them applies it.
    private void comboPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPointActionPerformed
        String fontName = textArea.getFont().getFontName();
        int selectedSizeIndex = comboPoint.getSelectedIndex();
        int newSize = Integer.parseInt(comboPoint.getItemAt(selectedSizeIndex));
        Font font = new Font(fontName, Font.PLAIN, newSize);
        textArea.setFont(font);
        settings[2] = String.valueOf(newSize);
        try{
            FileOutputStream fos = new FileOutputStream("settings.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(settings);
            oos.close();
            fos.close();
        }catch (IOException error){
            // do nothing
        }
    }//GEN-LAST:event_comboPointActionPerformed


    private void comboThemesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboThemesActionPerformed
        if (comboThemes.getSelectedIndex() == 0){
            textArea.setBackground(Color.WHITE);
            textArea.setForeground(Color.black);
        }else{
            textArea.setBackground(Color.darkGray);
            textArea.setForeground(Color.white);
        }
        int currentSelection = comboThemes.getSelectedIndex();
        settings[0] = comboThemes.getItemAt(currentSelection);
        try{
            FileOutputStream fos = new FileOutputStream("settings.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(settings);
            oos.close();
            fos.close();
        }catch (IOException error){
            // do nothing
        }
    }//GEN-LAST:event_comboThemesActionPerformed

    // loads the setting file if it exists, then applies the settings.
    private void loadFile() { // loads saved settings
        try{
            FileInputStream fis = new FileInputStream("settings.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            settings = (String[]) ois.readObject();
            ois.close();
            fis.close();

        }catch (IOException | ClassNotFoundException error){
            settings[0] = "Light";
            settings[1] = "Arial";
            settings[2] = "12";
        }
        String fontName = settings[1];
        int fontSize = Integer.parseInt(settings[2]);
        Font font = new Font(fontName, Font.PLAIN, fontSize);
        textArea.setFont(font);
        comboThemes.setSelectedItem(settings[0]);
        comboFonts.setSelectedItem(settings[1]);
        comboPoint.setSelectedItem(settings[2]);
    }



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame aboutFrame;
    private javax.swing.JComboBox<String> comboFonts;
    private javax.swing.JComboBox<String> comboPoint;
    private javax.swing.JComboBox<String> comboThemes;
    private javax.swing.JDialog saveWarning;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
